/*! @license pzpr.js v3.5.2-pre (c) 2009-2015 sabo2, MIT license
 *   https://bitbucket.org/sabo2/pzprv3 */
pzpr.classmgr.makeCustom(["country"],{MouseEvent:{mouseinput:function(){this.owner.playmode?this.mousestart||this.mousemove?this.btn.Left&&this.inputLine():this.mouseend&&this.notInputted()&&this.inputMB():this.owner.editmode&&(this.mousestart||this.mousemove?this.inputborder():this.mouseend&&this.notInputted()&&this.inputqnum())}},KeyEvent:{enablemake:!0},Cell:{maxnum:function(){return Math.min(255,this.owner.board.rooms.getCntOfRoomByCell(this))}},Board:{hasborder:1},LineManager:{isCenterLine:!0},AreaRoomManager:{enabled:!0,hastop:!0},Flags:{redline:!0,irowake:!0},Graphic:{gridcolor_type:"SLIGHT",paint:function(){this.drawBGCells(),this.drawNumbers(),this.drawGrid(),this.drawBorders(),this.drawMBs(),this.drawLines(),this.drawChassis(),this.drawTarget()}},Encode:{decodePzpr:function(){this.decodeBorder(),this.decodeRoomNumber16()},encodePzpr:function(){this.encodeBorder(),this.encodeRoomNumber16()}},FileIO:{decodeData:function(){this.decodeAreaRoom(),this.decodeCellQnum(),this.decodeBorderLine(),this.decodeCellQsub()},encodeData:function(){this.encodeAreaRoom(),this.encodeCellQnum(),this.encodeBorderLine(),this.encodeCellQsub()}},AnsCheck:{checklist:["checkBranchLine","checkCrossLine","checkRoomPassOnce","checkRoadCount","checkNoRoadCountry","checkSideAreaGrass","checkDeadendLine+","checkOneLoop"],checkRoadCount:function(){this.checkLinesInArea(this.getRoomInfo(),function(a,b,c,d){return 0>=d||d===c},"bkLineNe")},checkNoRoadCountry:function(){this.checkLinesInArea(this.getRoomInfo(),function(a,b,c){return 0!==c},"bkNoLine")},checkSideAreaGrass:function(){this.checkSideAreaCell(this.getRoomInfo(),function(a,b){return 0===a.lcnt&&0===b.lcnt},!1,"cbNoLine")},checkRoomPassOnce:function(){for(var a=this.getRoomInfo(),b=1;b<=a.max;b++){for(var c=0,d=a.area[b].clist,e=0;e<d.length;e++){var f,g=d[e],h=g.adjborder;f=h.top,1===f.ques&&1===f.line&&c++,f=h.bottom,1===f.ques&&1===f.line&&c++,f=h.left,1===f.ques&&1===f.line&&c++,f=h.right,1===f.ques&&1===f.line&&c++}if(!(2>=c)){if(this.failcode.add("bkPassTwice"),this.checkOnly)break;d.seterr(1)}}}},FailCode:{bkPassTwice:["線が１つの国を２回以上通っています。","A line passes a country twice or more."],bkNoLine:["線の通っていない国があります。","There is a country that is not passed any line."],bkLineNe:["数字のある国と線が通過するマスの数が違います。","The number of the cells that is passed any line in the country and the number written in the country is diffrerent."],cbNoLine:["線が通らないマスが、太線をはさんでタテヨコにとなりあっています。","The cells that is not passed any line are adjacent over border line."]}});